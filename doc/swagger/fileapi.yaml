#  This program and the accompanying materials are
#  made available under the terms of the Eclipse Public License v2.0 which accompanies
#  this distribution, and is available at https://www.eclipse.org/legal/epl-v20.html
#  
#  SPDX-License-Identifier: EPL-2.0
#  
#  Copyright Contributors to the Zowe Project.

swagger: '2.0'
info:
  description: This service describes some of the operations involved with datasets and unix files
  version: 1.0.0
  title: Dataset and Unix File API
host: localhost
basePath: /
schemes:
  - http
  - https
tags:
  - name: Dataset
  - name: Unix File
paths:
  /datasetMetadata/hlq:
    get:
      summary: Returns JSON array of the system's high level qualifiers and metadata parameters
      description: HLQ and metadata parameters
      tags:
        - Dataset
      produces:
        - application/json
      parameters:
        - name: updateCache
          in: query
          description: Cache results for future
          required: false
          type: boolean
        - name: types
          in: query
          description: Overrides defaults for CSI types to be scanned for
          required: false
          type: string
        - name: workAreaSize
          in: query
          description: Sets buffer size for CSI result
          required: false
          type: integer
        - name: resumeName
          in: query
          description: Resume from when response.hasMore != 0
          required: false
          type: string
        - name: resumeCatalogName
          in: query
          description: Resume from when hasMore != 0
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Metadata'
        '400':
          description: Invalid status value
  '/datasetMetadata/name/{dataset}':
    get:
      summary: Retrieves info about datasets
      tags:
        - Dataset
      produces:
        - application/json
      parameters:
        - name: dataset
          in: path
          description: Cache results for future
          required: true
          type: string
        - name: detail
          in: query
          description: 'Used to provide the details of each dataset rather than a summary of which were found. Defaults to retrieve name, type, volser'
          required: false
          type: boolean
        - name: types
          in: query
          description: 'csi entry type to search, Overrides defaults for the CSI types to be scanned for'
          required: false
          type: string
        - name: listMembers
          in: query
          description: Omits or includes PDS member scanning
          required: false
          type: boolean
        - name: workAreaSize
          in: query
          description: Sets buffer size for CSI result
          required: false
          type: integer
        - name: includeMigrated
          in: query
          description: Include migrated datasets
          required: false
          type: boolean
        - name: includeUnprintable
          in: query
          description: Include PDS member listing for PDS members with exceptional names
          required: false
          type: boolean
        - name: resumeName
          in: query
          description: Resume from when response.hasMore != 0
          required: false
          type: string
        - name: resumeCatalogName
          in: query
          description: Resume from when hasMore != 0
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Metadata'
        '400':
          description: 'Have only one of resumename, resumecatalogname or if either longer than 44 or invalid dataset'
  '/datasetContents/{dataset}':
    get:
      summary: Get contents of a dataset via QSAM as a series of records
      tags:
        - Dataset
      parameters:
        - name: dataset
          in: path
          description: Cache results for future
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              records:
                type: array
                items:
                  type: string
        '404':
          description: File could not be opened or does not exist
    post:
      summary: Updates contents of dataset
      tags:
        - Dataset
      parameters:
        - name: dataset
          in: path
          description: Cache results for future
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              records:
                type: array
                items:
                  type: string
      consumes:
        - application/json
      produces:
        - text/json
      responses:
        '200':
          description: successful operation
          schema:
            type: string
        '404':
          description: File could not be opened or does not exist
  '/VSAMdatasetContents/{dataset}':
    get:
      summary: Get a VSAM dataset
      tags:
       - Dataset
      parameters:
        - name: dataset
          in: path
          description: Cache results for future
          required: true
          type: string
        - name: closeAfter
          in: query
          description: retain pointer for VSAM dataset
          required: false
          type: boolean
      produces:
        - application/plain
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              records:
                type: array
                items:
                  type: string
        '404':
          description: File could not be opened or does not exist
    post:
      summary: Updates contents of dataset
      tags:
        - Dataset
      parameters:
        - name: dataset
          in: path
          description: Cache results for future
          required: true
          type: string
        - name: closeAfter
          in: query
          description: retain pointer for VSAM dataset
          required: false
          type: boolean
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              records:
                type: array
                items:
                  type: string
      consumes:
        - application/json
      produces:
        - text/plain
      responses:
        '200':
          description: successful operation
          schema:
            type: string
        '404':
          description: File could not be opened or does not exist
  '/unixfile/contents/{directory}':
    get:
      summary: returns directory listing if exists
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: the desired directory
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              entries:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    path:
                      type: string
                    directory:
                      type: boolean
                    size:
                      type: integer
                    ccsid:
                      type: integer
                    createdAt:
                      type: integer
                    mode:
                      type: integer
        '404':
          description: file could not be opened or does not exist
          schema:
            type: object
            properties:
              error: 
                type: string
    delete:
      summary: deletes a directory
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: the directory to be deleted
          required: true
          type: string
      responses:
        '200':
          description: successfully deleted a directory
          schema:
            type: object
            properties:
              msg: 
                type: string
        '404':
          description: file could not be opened or does not exist
          schema:
            type: object
            properties:
              error: 
                type: string
        '500':
          description: failed to delete a directory
          schema:
            type: object
            properties:
              error: 
                type: string
  '/unixfile/contents/{directory}/{file}':
    get:
      summary: returns file if exists
      tags:
        - Unix File
      produces:
        - application/json
      parameters:
        - name: directory
          in: path
          description: the directory where file is located
          required: true
          type: string
        - name: file
          in: path
          description: the file that should be returned
          required: true
          type: string
        - name: responseType
          in: query
          description: the file should be returned in "base64" or "raw"
          required: false
          default: base64
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
        '404':
          description: file could not be opened or does not exist
          schema:
            type: object
            properties:
              error: 
                type: string
    put:
      summary: writes contents to file or creates non-empty file
      description: When writing to a Unix File, the process must be done in chunks of 3MB or less. Please note that your first request will fail because you haven't been assigned a sessionID. If you don't have a sessionID in your request, then the server will assign you one and send it as a response. Please attach this sessionID to every subsequent request as a query parameter. This sessionID is linked to a particular file, so you must use it for the duration of the upload. If you lose it, then the file will be inaccessible via this API until your session timesout in five minutes. When you have specified lastChunk as true, then that signals the end of the upload session; thus, you have sent all the contents of the file.
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: the directory where the desired file is located
          required: true
          type: string
        - name: file
          in: path
          description: the file that should be modified
          required: true
          type: string
        - name: body
          in: body
          description: the file contents encoded with BASE64
          required: true
          schema:
            type: string
            example: aW50IG1haW4oKSB7CiAgcmV0dXJuIDA7Cn0=
        - name: sessionID
          in: query
          description: the id for current upload session
          type: string
          required: true
        - name: sourceEncoding
          in: query
          description: the source encoding of the file (UTF-8 or ISO-8859-1 or IBM-1047)
          type: string
          required: true
        - name: targetEncoding
          in: query
          description: the target encoding of the file (UTF-8 or ISO-8859-1 or IBM-1047)
          type: string
          required: true
        - name: lastChunk
          in: query
          description: whether or not this is the last chunk of the file
          type: boolean
          required: true
        - name: forceOverwrite
          in: query
          description: whether or not to overwrite a currently existing file
          type: boolean

      consumes:
        - text/plain
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              msg: 
                type: string
              sessionID:
                type: number
          examples:
            SessionID:
              {msg: Please attach the sessionID to subsequent requests, sessionID: int}
            File Already Exists: 
              {msg: File already exists. Please choose a different file name or attach the forceOverwrite query parameter to your next request.}
            Wrote Chunk:
              {msg: Successfully wrote chunk to file.}
            Wrote File:
              {msg: Successfully wrote file.}
              
        '400':
          description: Bad Request
          schema:
            type: object
            properties:
              msg:
                type: string
          examples:
            Encoding Missing:
              {error: Source encoding or target encoding are missing.}
            Invalid Encoding:
              {error: Unsupported encodings requested. Please review the swagger documentation.}
            Invalid Session ID:
              {error: Session identifier is invalid.}
            Last Chunk Missing:
              {error: Last chunk is missing.}
              
        '403':
          description: Forbidden
          schema:
            type: object
            properties:
              error:
                type: string
          examples:
            Resource Busy (Duplicate):
              {error: Duplicate in table. Requested resource is busy. Please try again later.}
            Resource Busy (Could not open file):
              {error: Could not open file. Requested resource is busy. Please try again later.}
              
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties:
              error: 
                type: string
          examples:
            Failure To Assign Session ID:
              {error: Could not assign session id. Please try again later.}
            Failed To Write Chunk:
              {error: Failed to write chunk to file. Aborting upload.}
            Failed To Open File:
              {error: Could not open file.}
            Failed To Close File:
              {error: Could not close file.}
            Failed to Create File:
              {error: Could not create file.}
            Failed to Get Metadata:
              {error: Could not get metadata for file.}
            Failed to Get iNode:
              {error: Could not get iNode of file.}
            Failed to Get deviceID:
              {error: Could not get deviceID of file.}
            Failed to Tag:
              {error: Could not tag file.}
            
    delete:
      summary: deletes a file
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: the directory where the desired file is located
          required: true
          type: string
        - name: file
          in: path
          description: the file that should be deleted
          required: true
          type: string
      responses:
        '200':
          description: successfully deleted a file
          schema:
            type: object
            properties:
              msg: 
                type: string
        '404':
          description: file could not be opened or does not exist
          schema:
            type: object
            properties:
              error: 
                type: string
        '500':
          description: failed to delete a file
          schema:
            type: object
            properties:
              error: 
                type: string
  '/unixfile/copy/{directory}/{file}':
    post:
      summary: copies contents of file
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: the directory where the desired file is located
          required: true
          type: string
        - name: file
          in: path
          description: the file that should be modified
          required: true
          type: string
        - name: newName
          in: query
          description: the name of the new file (absolute path)
          type: string
          required: true
        - name: forceOverwrite
          in: query
          description: whether or not to overwrite a currently existing file
          type: boolean
      consumes:
        - text/plain
      responses:
        '200':
          description: successfully copied a file
          schema:
            type: object
            properties:
              msg: 
                type: string
        '404':
          description: file could not be opened or does not exist
          schema:
            type: object
            properties:
              error: 
                type: string          
        '500':
          description: failed to copy a file
          schema:
            type: object
            properties:
              error: 
                type: string          
  '/unixfile/copy/{directory}':
    post:
      summary: copies contents of directory
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: the directory where the desired file is located
          required: true
          type: string
        - name: newName
          in: query
          description: the name of the new directory (absolute path)
          type: string
          required: true
        - name: forceOverwrite
          in: query
          description: whether or not to overwrite a currently existing file
          type: boolean
      consumes:
        - text/plain
      responses:
        '200':
          description: successfully copied a directory
          schema:
            type: object
            properties:
              msg: 
                type: string
        '404':
          description: file could not be opened or does not exist
          schema:
            type: object
            properties:
              error: 
                type: string
        '500':
          description: failed to copy a directory
          schema:
            type: object
            properties:
              error: 
                type: string
  '/unixfile/rename/{directory}/{file}':
    post:
      summary: renames a file
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: the directory where the desired file is located
          required: true
          type: string
        - name: file
          in: path
          description: the file that should be modified
          required: true
          type: string
        - name: newName
          in: query
          description: the name of the new file (absolute path)
          type: string
          required: true
        - name: forceOverwrite
          in: query
          description: whether or not to overwrite a currently existing file
          type: boolean
      consumes:
        - text/plain
      responses:
        '200':
          description: successfully renamed a file
          schema:
            type: object
            properties:
              msg: 
                type: string
        '404':
          description: file could not be opened or does not exist
          schema:
            type: object
            properties:
              error: 
                type: string
        '500':
          description: failed to rename a file
          schema:
            type: object
            properties:
              error: 
                type: string
  '/unixfile/rename/{directory}':
    post:
      summary: renames a directory
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: the directory where the desired file is located
          required: true
          type: string
        - name: newName
          in: query
          description: the name of the new directory (absolute path)
          type: string
          required: true
        - name: forceOverwrite
          in: query
          description: whether or not to overwrite a currently existing file
          type: boolean
      consumes:
        - text/plain
      responses:
        '200':
          description: successfully renamed a directory
          schema:
            type: object
            properties:
              msg: 
                type: string
        '404':
          description: file could not be opened or does not exist
          schema:
            type: object
            properties:
              error: 
                type: string
        '500':
          description: failed to rename a directory
          schema:
            type: object
            properties:
              error: 
                type: string
  '/unixfile/touch/{directory}/{file}':
    post:
      summary: creates new file
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: the directory where the desired file is located
          required: true
          type: string
        - name: file
          in: path
          description: the file that should be created
          required: true
          type: string
      consumes:
        - text/plain
      responses:
        '200':
          description: successfully created a file
          schema:
            type: object
            properties:
              msg: 
                type: string
        '404':
          description: file could not be opened or does not exist
          schema:
            type: object
            properties:
              error: 
                type: string
        '500':
          description: failed to create a file
          schema:
            type: object
            properties:
              error: 
                type: string
  '/unixfile/mkdir/{directory}':
    post:
      summary: creates new directory
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: the directory that should be created
          required: true
          type: string
        - name: forceOverwrite
          in: query
          description: whether or not to overwrite a currently existing file
          type: boolean
      consumes:
        - text/plain
      responses:
        '200':
          description: successfully created a directory
          schema:
            type: object
            properties:
              msg: 
                type: string
        '404':
          description: file could not be opened or does not exist
          schema:
            type: object
            properties:
              error: 
                type: string
        '500':
          description: failed to create a directory
          schema:
            type: object
            properties:
              error: 
                type: string
  '/unixfile/chmod/{directory}':
    post:
      summary: change directory/file mode
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: the initial directory/file
          required: true
          type: string
        - name: recursive
          in: query
          description: whether or not to proceed down the directory path
          type: boolean
        - name: mode
          in: query
          description: 'mode of file as 0oxxx or xxx, octal format'
          type: string
        - name: pattern
          in: query
          description: pattern to match to file/pattern
          type: string
      consumes:
        - text/plain
      responses:
        '200':
          description: successfully Modified Modes
          schema:
            type: object
            properties:
              msg:
                type: string
        '400':
          description: 'Failed to change mode,  mode not octal'
          schema:
            type: object
            properties:
              msg:
                type: string
        '500':
          description: failed to modify file modes
          schema:
            type: object
            properties:
              error:
                type: string
  '/unixfile/metadata/{directory}':
    get:
      summary: retrieves metadata for directory
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: desired directory
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              path:
                type: string
              directory:
                type: boolean
              size:
                type: integer
              ccsid:
                type: integer
              createdAt:
                type: string
              mode:
                type: integer
        '404':
          description: file could not be opened or does not exist
          schema:
            type: object
            properties:
              error: 
                type: string
  '/unixfile/metadata/{directory}/{file}':
    get:
      summary: retrieves metadata for file
      tags:
        - Unix File
      parameters:
        - name: directory
          in: path
          description: desired directory
          required: true
          type: string
        - name: file
          in: path
          description: desired file
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              path:
                type: string
              directory:
                type: boolean
              size:
                type: integer
              ccsid:
                type: integer
              createdAt:
                type: string
              mode:
                type: integer
        '404':
          description: file could not be opened or does not exist
          schema:
            type: object
            properties:
              error: 
                type: string
definitions:
  Metadata:
    type: object
    properties:
      _objectType:
        type: string
      _metadataVersion:
        type: string
      hasMore:
        type: integer
      datasets:
        type: array
        items:
          $ref: '#/definitions/Dataset'
  Dataset:
    type: object
    properties:
      name:
        type: string
      csiEntryType:
        type: string
      volser:
        type: string
      recfm:
        type: object
        properties:
          recordLength:
            type: string
          isBlocked:
            type: boolean
          carriageControl:
            type: string
      dsorg:
        type: object
        properties:
          organization:
            type: string
          isPDSDir:
            type: boolean
          maxRecordLen:
            type: integer
          totalBlockSize:
            type: integer
      members:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
